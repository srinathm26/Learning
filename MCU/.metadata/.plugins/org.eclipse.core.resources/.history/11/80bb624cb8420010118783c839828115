/*
 * stm32f407xx_GPIO_driver.c
 *
 *  Created on: Jun 1, 2025
 *      Author: gunal
 */

#include "stm32f407xx.h"
#include "stm32f407xx_gpio_driver.h"


//....GPIO clock Control API
void GPIO_PCLK_CTRL(GPIO_RegDef_t *pGPIOx, uint8_t CLKValue){

	if(CLKValue == ENABLE){
		if(pGPIOx == GPIOA)
			GPIOA_PCLK_EN();
		else if(pGPIOx == GPIOB)
			GPIOB_PCLK_EN();
		else if(pGPIOx == GPIOC)
			GPIOC_PCLK_EN();
		else if(pGPIOx == GPIOD)
			GPIOD_PCLK_EN();
		else if(pGPIOx == GPIOE)
			GPIOE_PCLK_EN();
		else if(pGPIOx == GPIOF)
			GPIOF_PCLK_EN();
		else if(pGPIOx == GPIOG)
			GPIOG_PCLK_EN();
		else if(pGPIOx == GPIOH)
			GPIOH_PCLK_EN();
		else if(pGPIOx == GPIOI)
			GPIOI_PCLK_EN();
	}
	else{
		if(pGPIOx == GPIOA)
			GPIOA_PCLK_DI();
		else if(pGPIOx == GPIOB)
			GPIOB_PCLK_DI();
		else if(pGPIOx == GPIOC)
			GPIOC_PCLK_DI();
		else if(pGPIOx == GPIOD)
			GPIOD_PCLK_DI();
		else if(pGPIOx == GPIOE)
			GPIOE_PCLK_DI();
		else if(pGPIOx == GPIOF)
			GPIOF_PCLK_DI();
		else if(pGPIOx == GPIOG)
			GPIOG_PCLK_DI();
		else if(pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if(pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
//....

//....GPIO Init/De-Init APIs
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){

		if(pGPIOHandle->PinConfig.PinMode <= GPIO_MODE_ANALOG){
			pGPIOHandle->pGPIOx->MODER &= (~(3 << (2*pGPIOHandle->PinConfig.PinNumber)));
			pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->PinConfig.PinMode << (2*pGPIOHandle->PinConfig.PinNumber));
		}
		else{
			uint8_t tempEXTIIndex,tempEXTIBitIndex,tempEXTIBitValue;
			if(pGPIOHandle->PinConfig.PinMode == GPIO_MODE_IT_FT){
				pGPIOHandle->pGPIOx->MODER &= (~(3 << (2*pGPIOHandle->PinConfig.PinNumber)));
				pGPIOHandle->pGPIOx->MODER |= (GPIO_MODE_IP << (2*pGPIOHandle->PinConfig.PinNumber));
				EXTI->FTSR |= (1 << pGPIOHandle->PinConfig.PinNumber);
				EXTI->RTSR &= ~(1 << pGPIOHandle->PinConfig.PinNumber);

			}
			else if(pGPIOHandle->PinConfig.PinMode == GPIO_MODE_IT_RT){
				EXTI->RTSR |= (1 << pGPIOHandle->PinConfig.PinNumber);
				EXTI->FTSR &= ~(1 << pGPIOHandle->PinConfig.PinNumber);

			}
			else if((pGPIOHandle->PinConfig.PinMode == GPIO_MODE_IT_RFT)){
				EXTI->RTSR |= (1 << pGPIOHandle->PinConfig.PinNumber);
				EXTI->FTSR |= (1 << pGPIOHandle->PinConfig.PinNumber);
			}

			//..Set SYSCFG
			tempEXTIIndex = pGPIOHandle->PinConfig.PinNumber / 4;
			tempEXTIBitIndex = pGPIOHandle->PinConfig.PinNumber % 4;
			tempEXTIBitValue = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
			SYSCFG_PCLK_EN();
			SYSCFG->EXTICR[tempEXTIIndex] |= ( tempEXTIBitValue << (4 * tempEXTIBitIndex));
			//...

			//..Set mask
			EXTI->IMR |= (1 << pGPIOHandle->PinConfig.PinNumber);
			//..

		}
		if(pGPIOHandle->PinConfig.PinSpeed <= GPIO_OP_SPEED_VHI){
			pGPIOHandle->pGPIOx->OSPEEDR &= (~(3 << (2*pGPIOHandle->PinConfig.PinNumber)));
			pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->PinConfig.PinSpeed << (2*pGPIOHandle->PinConfig.PinNumber));
		}
		if(pGPIOHandle->PinConfig.PinOPtype <= GPIO_OP_TYPE_OD){
			pGPIOHandle->pGPIOx->ODR &= (~(1 << (pGPIOHandle->PinConfig.PinNumber)));
			pGPIOHandle->pGPIOx->ODR |= (pGPIOHandle->PinConfig.PinOPtype << (pGPIOHandle->PinConfig.PinNumber));
		}
		if(pGPIOHandle->PinConfig.PinPuPdControl <= GPIO_PULL_DOWN){
			pGPIOHandle->pGPIOx->PUPDR &= (~(3 << (2*pGPIOHandle->PinConfig.PinNumber)));
			pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->PinConfig.PinPuPdControl << (2*pGPIOHandle->PinConfig.PinNumber));
		}
		if(pGPIOHandle->PinConfig.PinMode == GPIO_MODE_ALTFN){
			uint8_t temp1,temp2;
			temp1 = pGPIOHandle->PinConfig.PinNumber / 8;
			temp2 = pGPIOHandle->PinConfig.PinNumber % 8;
			pGPIOHandle->pGPIOx->AFR[temp1] &= (~(3 << (2*pGPIOHandle->PinConfig.PinNumber)));
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->PinConfig.PinAltFunMode << (4*temp2));

		}



}

void GPIO_De_Init(GPIO_RegDef_t *pGPIOx){

		if(pGPIOx == GPIOA){
			GPIOA_REG_RESET();
		}
		else if(pGPIOx == GPIOB){
			GPIOB_REG_RESET();
		}
		else if(pGPIOx == GPIOC){
			GPIOC_REG_RESET();
		}
		else if(pGPIOx == GPIOD){
			GPIOD_REG_RESET();
		}
		else if(pGPIOx == GPIOE){
			GPIOE_REG_RESET();
		}
		else if(pGPIOx == GPIOF){
			GPIOF_REG_RESET();
		}
		else if(pGPIOx == GPIOG){
			GPIOG_REG_RESET();
		}
		else if(pGPIOx == GPIOH){
			GPIOH_REG_RESET();
		}
		else if(pGPIOx == GPIOI){
			GPIOI_REG_RESET();
		}
}
uint8_t GPIO_ReadIPPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x1);
	return value;
}
uint16_t GPIO_ReadIPPort(GPIO_RegDef_t *pGPIOx){
	uint16_t value;
	value = (uint16_t) pGPIOx->IDR;
	return value;
}
void GPIO_WriteOPPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
    if (Value == GPIO_PIN_SET) {
        pGPIOx->ODR |= (1 << PinNumber);
    }
    else {
        pGPIOx->ODR &= ~(1 << PinNumber);
    }
}
void GPIO_WriteOPPort(GPIO_RegDef_t *pGPIOx, uint16_t Value){
	pGPIOx->ODR = Value;
}
void GPIO_ToggleOPPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
	pGPIOx->ODR ^= (1 << PinNumber);
}
//....

//....GPIO IRQ APIs
void GPIO_IRQ_Config(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t value){
	if(value == ENABLE){
		if(IRQNumber <= 31){
			*NVIC_ISER0 |= (1 << IRQNumber);
		}
		else if(IRQNumber > 31 && IRQNumber < 64){
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
		}
		else if(IRQNumber > 65 && IRQNumber < 96){
			*NVIC_ISER2 |= (1 << IRQNumber % 32);
		}
	}
	else{
		if(IRQNumber <= 31){

		}
		else if(IRQNumber > 31 && IRQNumber < 64){

		}
		else if(IRQNumber > 65 && IRQNumber < 96){

		}
	}
}
void GPIO_IRQ_Handling(uint8_t PinNumber){

}
//....



